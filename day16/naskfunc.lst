     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]                ; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]              ; 32位命令集
     6 00000000                                 [BITS 32]                       ; 制作32位模模式用的机械语言
     7 00000000                                 [FILE "naskfunc.asm"]           ; 源文件名信息
     8 00000000                                 
     9 00000000                                         GLOBAL  _io_hlt,    _io_cli,    _io_sti,    _io_stihlt
    10 00000000                                         GLOBAL  _io_in8,    _io_in16,   _io_in32
    11 00000000                                         GLOBAL  _io_out8,   _io_out16,  _io_out32
    12 00000000                                         GLOBAL  _io_load_eflags,        _io_store_eflags
    13 00000000                                         GLOBAL  _load_gdtr, _load_idtr
    14 00000000                                         GLOBAL  _load_cr0, _store_cr0
    15 00000000                                         GLOBAL  _load_tr
    16 00000000                                         GLOBAL  _asm_inthandler20, _asm_inthandler21
    17 00000000                                         GLOBAL  _asm_inthandler27, _asm_inthandler2c
    18 00000000                                         GLOBAL  _memtest_sub
    19 00000000                                         GLOBAL  _farjmp
    20 00000000                                         EXTERN  _inthandler20, _inthandler21
    21 00000000                                         EXTERN  _inthandler27, _inthandler2c
    22 00000000                                         
    23 00000000                                 
    24                                          [SECTION .text]		; 目标文件中写了这些之后再写程序
    25 00000000                                 
    26 00000000                                 _io_hlt:	; void io_hlt(void);
    27 00000000 F4                                      HLT
    28 00000001 C3                                      RET
    29 00000002                                 
    30 00000002                                 _io_cli:    ; void io_vli(void);
    31 00000002 FA                                      CLI
    32 00000003 C3                                      RET
    33 00000004                                 
    34 00000004                                 _io_sti:    ; void io_sti(void);
    35 00000004 FB                                      STI
    36 00000005 C3                                      RET
    37 00000006                                 
    38 00000006                                 _io_stihlt: ; void io_stihlt(void);
    39 00000006 FB                                      STI
    40 00000007 F4                                      HLT
    41 00000008 C3                                      RET
    42 00000009                                 
    43 00000009                                 _io_in8:    ; int io_in8(int port);
    44 00000009 8B 54 24 04                             MOV     EDX, [ESP + 4]      ; port
    45 0000000D B8 00000000                             MOV     EAX, 0
    46 00000012 EC                                      IN      AL, DX
    47 00000013 C3                                      RET
    48 00000014                                 
    49 00000014                                 _io_in16:   ; int io_in16(int port);
    50 00000014 8B 54 24 04                             MOV     EDX, [ESP + 4]      ; port
    51 00000018 B8 00000000                             MOV     EAX, 0
    52 0000001D 66 ED                                   IN      AX, DX
    53 0000001F C3                                      RET
    54 00000020                                 
    55 00000020                                 _io_in32:   ; int io_in32(int port);
    56 00000020 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    57 00000024 ED                                  IN      EAX, DX
    58 00000025 C3                                  RET
    59 00000026                                 
    60 00000026                                 _io_out8:    ; void _io_out8(int port, int data);
    61 00000026 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    62 0000002A 8A 44 24 08                         MOV     AL, [ESP + 8]       ; data
    63 0000002E EE                                  OUT     DX, AL
    64 0000002F C3                                  RET
    65 00000030                                 
    66 00000030                                 _io_out16:   ; void _io_out16(int port, int data);
    67 00000030 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    68 00000034 66 8B 44 24 08                      MOV     AX, [ESP + 8]       ; data
    69 00000039 66 EF                               OUT     DX, AX
    70 0000003B C3                                  RET
    71 0000003C                                 
    72 0000003C                                 _io_out32:   ; void _io_out32(int port, int data);
    73 0000003C 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    74 00000040 8B 44 24 08                         MOV     EAX, [ESP + 8]       ; data
    75 00000044 EF                                  OUT     DX, EAX
    76 00000045 C3                                  RET
    77 00000046                                 
    78 00000046                                 _io_load_eflags:    ; int io_load_eflags(void);
    79 00000046 9C                                  PUSHFD          ; 指 PUSH EFLAGS
    80 00000047 58                                  POP     EAX
    81 00000048 C3                                  RET
    82 00000049                                 
    83 00000049                                 _io_store_eflags:   ; void io_store_eflags(int eflags);
    84 00000049 8B 44 24 04                         MOV     EAX, [ESP + 4]
    85 0000004D 50                                  PUSH    EAX
    86 0000004E 9D                                  POPFD           ; 指 POP EFLAGS
    87 0000004F C3                                  RET
    88 00000050                                 
    89 00000050                                 _load_gdtr:     ; void load_gdtr(int limit, int addr);
    90 00000050 66 8B 44 24 04                      MOV     AX, [ESP + 4]       ;limit
    91 00000055 66 89 44 24 06                      MOV     [ESP + 6], AX
    92 0000005A 0F 01 54 24 06                      LGDT    [ESP + 6]
    93 0000005F C3                                  RET
    94 00000060                                 
    95 00000060                                 _load_idtr:     ; void load_idtr(int limit, int addr);
    96 00000060 66 8B 44 24 04                      MOV     AX, [ESP + 4]
    97 00000065 66 89 44 24 06                      MOV     [ESP + 6], AX
    98 0000006A 0F 01 5C 24 06                      LIDT    [ESP + 6]
    99 0000006F C3                                  RET
   100 00000070                                 
   101 00000070                                 _asm_inthandler21:
   102 00000070 06                                      PUSH    ES
   103 00000071 1E                                      PUSH    DS
   104 00000072 60                                      PUSHAD
   105 00000073 89 E0                                   MOV     EAX, ESP
   106 00000075 50                                      PUSH    EAX
   107 00000076 66 8C D0                                MOV     AX, SS
   108 00000079 8E D8                                   MOV     DS, AX
   109 0000007B 8E C0                                   MOV     ES, AX
   110 0000007D E8 [00000000]                           CALL    _inthandler21
   111 00000082 58                                      POP     EAX
   112 00000083 61                                      POPAD
   113 00000084 1F                                      POP     DS
   114 00000085 07                                      POP     ES
   115 00000086 CF                                      IRETD
   116 00000087                                 
   117 00000087                                 _asm_inthandler27:
   118 00000087 06                                      PUSH    ES
   119 00000088 1E                                      PUSH    DS
   120 00000089 60                                      PUSHAD
   121 0000008A 89 E0                                   MOV     EAX, ESP
   122 0000008C 50                                      PUSH    EAX
   123 0000008D 66 8C D0                                MOV     AX, SS
   124 00000090 8E D8                                   MOV     DS, AX
   125 00000092 8E C0                                   MOV     ES, AX
   126 00000094 E8 [00000000]                           CALL    _inthandler27
   127 00000099 58                                      POP     EAX
   128 0000009A 61                                      POPAD
   129 0000009B 1F                                      POP     DS
   130 0000009C 07                                      POP     ES
   131 0000009D CF                                      IRETD
   132 0000009E                                 
   133 0000009E                                 _asm_inthandler2c:
   134 0000009E 06                                      PUSH    ES
   135 0000009F 1E                                      PUSH    DS
   136 000000A0 60                                      PUSHAD
   137 000000A1 89 E0                                   MOV     EAX, ESP
   138 000000A3 50                                      PUSH    EAX
   139 000000A4 66 8C D0                                MOV     AX, SS
   140 000000A7 8E D8                                   MOV     DS, AX
   141 000000A9 8E C0                                   MOV     ES, AX
   142 000000AB E8 [00000000]                           CALL    _inthandler2c
   143 000000B0 58                                      POP     EAX
   144 000000B1 61                                      POPAD
   145 000000B2 1F                                      POP     DS
   146 000000B3 07                                      POP     ES
   147 000000B4 CF                                      IRETD
   148 000000B5                                 
   149 000000B5                                 _asm_inthandler20:
   150 000000B5 06                                      PUSH    ES
   151 000000B6 1E                                      PUSH    DS
   152 000000B7 60                                      PUSHAD
   153 000000B8 89 E0                                   MOV     EAX, ESP
   154 000000BA 50                                      PUSH    EAX
   155 000000BB 66 8C D0                                MOV     AX, SS
   156 000000BE 8E D8                                   MOV     DS, AX
   157 000000C0 8E C0                                   MOV     ES, AX
   158 000000C2 E8 [00000000]                           CALL    _inthandler20
   159 000000C7 58                                      POP     EAX
   160 000000C8 61                                      POPAD
   161 000000C9 1F                                      POP     DS
   162 000000CA 07                                      POP     ES
   163 000000CB CF                                      IRETD
   164 000000CC                                 
   165 000000CC                                 _load_cr0:  ; int load_cr0(void)
   166 000000CC 0F 20 C0                                MOV     EAX, CR0
   167 000000CF C3                                      RET
   168 000000D0                                 
   169 000000D0                                 _store_cr0: ; void store_cr0(int cr0);
   170 000000D0 8B 44 24 04                             MOV     EAX, [ESP+4]
   171 000000D4 0F 22 C0                                MOV     CR0, EAX
   172 000000D7 C3                                      RET
   173 000000D8                                 
   174 000000D8                                 _load_tr:
   175 000000D8 0F 00 5C 24 04                          LTR     [ESP+4]                 ;tr
   176 000000DD C3                                      RET
   177 000000DE                                 
   178 000000DE                                 _memtest_sub:   ; unsigned int memtest_sub(unsigned int start, unsigned int end);
   179 000000DE 57                                      PUSH    EDI                     ; 由于还要使用EBX, ESI, EDI
   180 000000DF 56                                      PUSH    ESI
   181 000000E0 53                                      PUSH    EBX
   182 000000E1 BE AA55AA55                             MOV     ESI, 0xAA55AA55         ; pat0 = 0xAA55AA55
   183 000000E6 BF 55AA55AA                             MOV     EDI, 0x55AA55AA         ; pat1 = 0x55AA55AA
   184 000000EB 8B 44 24 10                             MOV     EAX, [ESP + 12 + 4]     ; i = start
   185 000000EF                                 
   186 000000EF                                 
   187 000000EF                                 mts_loop:
   188 000000EF 89 C3                                   MOV     EBX, EAX
   189 000000F1 81 C3 00000FFC                          ADD     EBX, 0xFFC              ; p = i + 0xFFC
   190 000000F7 8B 13                                   MOV     EDX, [EBX]              ; old = *p
   191 000000F9 89 33                                   MOV     [EBX], ESI              ; *p = pat0
   192 000000FB 83 33 FF                                XOR     DWORD [EBX], 0xFFFFFFFF ; *p ^= 0xFFFFFFFF
   193 000000FE 3B 3B                                   CMP     EDI, [EBX]              ; if(*p != pat1) goto fin
   194 00000100 75 18                                   JNE     mts_fin
   195 00000102 83 33 FF                                XOR     DWORD [EBX], 0xFFFFFFFF ; *p ^= 0xFFFFFFFF
   196 00000105 3B 33                                   CMP     ESI, [EBX]              ; if(*p != pat0) goto fin
   197 00000107 75 11                                   JNE     mts_fin
   198 00000109 89 13                                   MOV     [EBX], EDX              ; *p = old;
   199 0000010B 05 00001000                             ADD     EAX, 0x1000             ; i += 0x1000
   200 00000110 3B 44 24 14                             CMP     EAX, [esp + 12 + 8]     ; if(i <= end) goto mts_loop
   201 00000114 76 D9                                   JBE     mts_loop
   202 00000116 5B                                      POP     EBX
   203 00000117 5E                                      POP     ESI
   204 00000118 5F                                      POP     EDI
   205 00000119 C3                                      RET
   206 0000011A                                 mts_fin:
   207 0000011A 89 13                                   MOV     [EBX], EDX              ; *p = old
   208 0000011C 5B                                      POP     EBX
   209 0000011D 5E                                      POP     ESI
   210 0000011E 5F                                      POP     EDI
   211 0000011F C3                                      RET
   212 00000120                                 
   213 00000120                                 _farjmp:
   214 00000120 FF 6C 24 04                             JMP     FAR [ESP + 4]
   215 00000124 C3                                      RET