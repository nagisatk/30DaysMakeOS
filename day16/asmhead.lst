     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [INSTRSET "i486p"]				; 使用486指令集
     5  = 00280000                              BOTPAK	EQU		0x00280000		; bootpackのLoad先
     6  = 00100000                              DSKCAC	EQU		0x00100000		; Disk Cacheの場所
     7  = 00008000                              DSKCAC0	EQU		0x00008000		; Disk Cacheの場所（Real Mode）
     8 00000000                                 
     9 00000000                                 ; BOOT_INFO関係
    10  = 00000FF0                              CYLS	EQU		0x0ff0			; Boot sector設定
    11  = 00000FF1                              LEDS	EQU		0x0ff1
    12  = 00000FF2                              VMODE	EQU		0x0ff2			; ?色位数
    13  = 00000FF4                              SCRNX	EQU		0x0ff4			; 分辨率のX
    14  = 00000FF6                              SCRNY	EQU		0x0ff6			; 解像度のY
    15  = 00000FF8                              VRAM	EQU		0x0ff8			; Graphic Bufferの開始番地
    16  = 00000107                              VBEMODE	EQU		0x107			; Graphic Bufferの開始番地
    17 00000000                                 
    18                                          		ORG		0xc200			; 程序?入地址
    19 0000C200                                 
    20 0000C200                                 ; 确认VBE是否存在
    21 0000C200 B8 9000                                 MOV     AX, 0x9000
    22 0000C203 8E C0                                   MOV     ES, AX
    23 0000C205 BF 0000                                 MOV     DI, 0
    24 0000C208 B8 4F00                                 MOV     AX, 0x4F00
    25 0000C20B CD 10                                   INT     0x10
    26 0000C20D 3D 004F                                 CMP     AX, 0x004F
    27 0000C210 75 52                                   JNE     scrn320
    28 0000C212                                 
    29 0000C212                                 ; 检查VBE的版本
    30 0000C212 26 8B 45 04                             MOV     AX, [ES:DI + 4]
    31 0000C216 3D 0200                                 CMP     AX, 0x0200
    32 0000C219 72 49                                   JB      scrn320
    33 0000C21B                                         
    34 0000C21B                                 ; 取得画面模式信息
    35 0000C21B B9 0107                                 MOV     CX, VBEMODE
    36 0000C21E B8 4F01                                 MOV     AX, 0x4F01
    37 0000C221 CD 10                                   INT     0x10
    38 0000C223 3D 004F                                 CMP     AX, 0x004F
    39 0000C226 75 3C                                   JNE     scrn320
    40 0000C228                                 
    41 0000C228                                 ; 画面模式信息的确认
    42 0000C228 26 80 7D 19 08                          CMP     BYTE [ES:DI + 0x19], 8
    43 0000C22D 75 35                                   JNE     scrn320
    44 0000C22F 26 80 7D 1B 04                          CMP     BYTE [ES:DI + 0x1B], 4
    45 0000C234 75 2E                                   JNE     scrn320
    46 0000C236 26 8B 05                                MOV     AX, [ES:DI + 0x00]
    47 0000C239 25 0080                                 AND     AX, 0x0080
    48 0000C23C 74 26                                   JZ      scrn320
    49 0000C23E                                 
    50 0000C23E                                 
    51 0000C23E                                 ; 画面模式的切换
    52 0000C23E                                 
    53 0000C23E BB 4107                         		MOV		BX,VBEMODE+0x4000
    54 0000C241 B8 4F02                         		MOV		AX,0x4f02
    55 0000C244 CD 10                           		INT		0x10
    56 0000C246 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 画面モードをメモする（C言語が参照する）
    57 0000C24B 26 8B 45 12                     		MOV		AX,[ES:DI+0x12]
    58 0000C24F A3 0FF4                         		MOV		[SCRNX],AX
    59 0000C252 26 8B 45 14                     		MOV		AX,[ES:DI+0x14]
    60 0000C256 A3 0FF6                         		MOV		[SCRNY],AX
    61 0000C259 66 26 8B 45 28                  		MOV		EAX,[ES:DI+0x28]
    62 0000C25E 66 A3 0FF8                      		MOV		[VRAM],EAX
    63 0000C262 EB 20                           		JMP		keystatus
    64 0000C264                                 
    65 0000C264                                 
    66 0000C264                                 scrn320:
    67 0000C264 B0 13                           		MOV		AL,0x13			; VGAグラフィックス、320x200x8bitカラー
    68 0000C266 B4 00                           		MOV		AH,0x00
    69 0000C268 CD 10                           		INT		0x10
    70 0000C26A C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 画面モードをメモする（C言語が参照する）
    71 0000C26F C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
    72 0000C275 C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
    73 0000C27B 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
    74 0000C284                                 
    75 0000C284                                 ; 从BIOS?取KeyboardのLED状態
    76 0000C284                                 keystatus:
    77 0000C284 B4 02                           		MOV		AH,0x02
    78 0000C286 CD 16                           		INT		0x16 			; keyboard BIOS
    79 0000C288 A2 0FF1                         		MOV		[LEDS],AL
    80 0000C28B                                 
    81 0000C28B                                 ; Make sure that PIC does not accept any interrupts
    82 0000C28B                                 ; 根据AT兼容机的规格，如果要初始化PIC
    83 0000C28B                                 ; 必须在CLI之前进行，否则有时挂起
    84 0000C28B                                 ; 随后进行PIC的初始化
    85 0000C28B                                 
    86 0000C28B B0 FF                           		MOV		AL,0xff
    87 0000C28D E6 21                           		OUT		0x21,AL
    88 0000C28F 90                              		NOP						; 如果连续执行OUT指令，有些机种会无法正常运行
    89 0000C290 E6 A1                           		OUT		0xa1,AL
    90 0000C292                                 
    91 0000C292 FA                              		CLI						; 禁止CPU级别的中断
    92 0000C293                                 
    93 0000C293                                 ; 为了让CPU能够访问1MB以上以上的内厝空间，设定A20GATE
    94 0000C293                                 
    95 0000C293 E8 00B5                         		CALL	waitkbdout
    96 0000C296 B0 D1                           		MOV		AL,0xd1
    97 0000C298 E6 64                           		OUT		0x64,AL
    98 0000C29A E8 00AE                         		CALL	waitkbdout
    99 0000C29D B0 DF                           		MOV		AL,0xdf			; enable A20
   100 0000C29F E6 60                           		OUT		0x60,AL
   101 0000C2A1 E8 00A7                         		CALL	waitkbdout
   102 0000C2A4                                 
   103 0000C2A4                                 ; 切换到保护模式
   104 0000C2A4                                 
   105 0000C2A4                                 
   106 0000C2A4 0F 01 16 C38A                   		LGDT	[GDTR0]			; 设定临时的GDT
   107 0000C2A9 0F 20 C0                        		MOV		EAX,CR0
   108 0000C2AC 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 设定bit31为0（为了禁止分页）
   109 0000C2B2 66 83 C8 01                     		OR		EAX,0x00000001	; 设定bit0为1（为了切换到保护模式）
   110 0000C2B6 0F 22 C0                        		MOV		CR0,EAX
   111 0000C2B9 EB 00                           		JMP		pipelineflush
   112 0000C2BB                                 pipelineflush:
   113 0000C2BB B8 0008                         		MOV		AX,1*8			; 可读写的段 32bit
   114 0000C2BE 8E D8                           		MOV		DS,AX
   115 0000C2C0 8E C0                           		MOV		ES,AX
   116 0000C2C2 8E E0                           		MOV		FS,AX
   117 0000C2C4 8E E8                           		MOV		GS,AX
   118 0000C2C6 8E D0                           		MOV		SS,AX
   119 0000C2C8                                 
   120 0000C2C8                                 ; bootpack的转送
   121 0000C2C8                                 
   122 0000C2C8 66 BE 0000C390                  		MOV		ESI,bootpack	; 转送源
   123 0000C2CE 66 BF 00280000                  		MOV		EDI,BOTPAK		; 转送目的地
   124 0000C2D4 66 B9 00020000                  		MOV		ECX,512*1024/4
   125 0000C2DA E8 0077                         		CALL	memcpy
   126 0000C2DD                                 
   127 0000C2DD                                 ; 磁盘数据最终转送到它本来的位置去
   128 0000C2DD                                 
   129 0000C2DD                                 ; 首先从启动扇区开始
   130 0000C2DD                                 
   131 0000C2DD 66 BE 00007C00                  		MOV		ESI,0x7c00		; 转送源
   132 0000C2E3 66 BF 00100000                  		MOV		EDI,DSKCAC		; 转送目的地
   133 0000C2E9 66 B9 00000080                  		MOV		ECX,512/4
   134 0000C2EF E8 0062                         		CALL	memcpy
   135 0000C2F2                                 
   136 0000C2F2                                 ; 剩下的全部
   137 0000C2F2                                 
   138 0000C2F2 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 转送源
   139 0000C2F8 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 转送目的地
   140 0000C2FE 66 B9 00000000                  		MOV		ECX,0
   141 0000C304 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   142 0000C308 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; 从柱面数变换为字节数/4
   143 0000C30F 66 81 E9 00000080               		SUB		ECX,512/4		; 减去 IPL
   144 0000C316 E8 003B                         		CALL	memcpy
   145 0000C319                                 
   146 0000C319                                 ; 必须由asmhead来完成的工作，至此全部完毕
   147 0000C319                                 ;	接下来交由bootpack来完成
   148 0000C319                                 
   149 0000C319                                 ; bootpack的启动
   150 0000C319                                 
   151 0000C319 66 BB 00280000                  		MOV		EBX,BOTPAK
   152 0000C31F 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   153 0000C324 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   154 0000C328 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   155 0000C32C 74 10                           		JZ		skip			; 没有要转送的东西时
   156 0000C32E 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 转送源
   157 0000C333 66 01 DE                        		ADD		ESI,EBX
   158 0000C336 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 转送目的地
   159 0000C33B E8 0016                         		CALL	memcpy
   160 0000C33E                                 skip:
   161 0000C33E 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; 栈初始值
   162 0000C343 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   163 0000C34B                                 
   164 0000C34B                                 waitkbdout:
   165 0000C34B E4 64                           		IN		 AL,0x64
   166 0000C34D 24 02                           		AND		 AL,0x02
   167 0000C34F E4 60                           		IN		 AL,0x60		; 空读（为了清空数据缓冲区的垃圾数据）
   168 0000C351 75 F8                           		JNZ		waitkbdout		; AND的结果如果不是0，就跳到waitkbdout
   169 0000C353 C3                              		RET
   170 0000C354                                 
   171 0000C354                                 memcpy:
   172 0000C354 67 66 8B 06                     		MOV		EAX,[ESI]
   173 0000C358 66 83 C6 04                     		ADD		ESI,4
   174 0000C35C 67 66 89 07                     		MOV		[EDI],EAX
   175 0000C360 66 83 C7 04                     		ADD		EDI,4
   176 0000C364 66 83 E9 01                     		SUB		ECX,1
   177 0000C368 75 EA                           		JNZ		memcpy			; 减法运算的结果如果不是0，就跳到memcpy
   178 0000C36A C3                              		RET
   179 0000C36B                                 ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   180 0000C36B                                 
   181 0000C36B 00 00 00 00 00                  		ALIGNB	16
   182 0000C370                                 GDT0:
   183 0000C370 00 00 00 00 00 00 00 00         		RESB	8				; NULL Selector
   184 0000C378 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 可以读写的段（segment）32bit
   185 0000C380 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 可以执行的段（segment）32bit（bootpack用）
   186 0000C388                                 
   187 0000C388 0000                            		DW		0
   188 0000C38A                                 GDTR0:
   189 0000C38A 0017                            		DW		8*3-1
   190 0000C38C 0000C370                        		DD		GDT0
   191 0000C390                                 
   192 0000C390                                 		ALIGNB	16
   193 0000C390                                 bootpack:
