     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]              ; 32位命令集
     6 00000000                                 [BITS 32]						; 制作32位模模式用的机械语言
     7 00000000                                 [FILE "naskfunc.asm"]			; 源文件名信息
     8 00000000                                 
     9 00000000                                         ; GLOBAL	_io_hlt, _write_mem8			; 程序中包含的函数名
    10 00000000                                         GLOBAL  _io_hlt,    _io_cli,    _io_sti,    _io_stihlt
    11 00000000                                         GLOBAL  _io_in8,    _io_in16,   _io_in32
    12 00000000                                         GLOBAL  _io_out8,   _io_out16,  _io_out32
    13 00000000                                         GLOBAL  _io_load_eflags,        _io_store_eflags
    14 00000000                                         GLOBAL  _load_gdtr, _load_idtr
    15 00000000                                 
    16 00000000                                 
    17 00000000                                 ; 以下是实际的函数
    18 00000000                                 
    19                                          [SECTION .text]		; 目标文件中写了这些之后再写程序
    20 00000000                                 
    21 00000000                                 _io_hlt:	; void io_hlt(void);
    22 00000000 F4                                      HLT
    23 00000001 C3                                      RET
    24 00000002                                 _io_cli:    ; void io_vli(void);
    25 00000002 FA                                  CLI
    26 00000003 C3                                  RET
    27 00000004                                 _io_sti:    ; void io_sti(void);
    28 00000004 FB                                  STI
    29 00000005 C3                                  RET
    30 00000006                                 _io_stihlt: ; void io_stihlt(void);
    31 00000006 FB                                  STI
    32 00000007 F4                                  HLT
    33 00000008 C3                                  RET
    34 00000009                                 _io_in8:    ; int io_in8(int port);
    35 00000009 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    36 0000000D B8 00000000                         MOV     EAX, 0
    37 00000012 EC                                  IN      AL, DX
    38 00000013 C3                                  RET
    39 00000014                                 _io_in16:   ; int io_in16(int port);
    40 00000014 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    41 00000018 B8 00000000                         MOV     EAX, 0
    42 0000001D 66 ED                               IN      AX, DX
    43 0000001F C3                                  RET
    44 00000020                                 _io_in32:   ; int io_in32(int port);
    45 00000020 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    46 00000024 B8 00000000                         MOV     EAX, 0
    47 00000029 ED                                  IN      EAX, DX
    48 0000002A C3                                  RET
    49 0000002B                                 
    50 0000002B                                 _io_out8:    ; void _io_out8(int port, int data);
    51 0000002B 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    52 0000002F 8A 44 24 08                         MOV     AL, [ESP + 8]       ; data
    53 00000033 EE                                  OUT     DX, AL
    54 00000034 C3                                  RET
    55 00000035                                 _io_out16:   ; void _io_out16(int port, int data);
    56 00000035 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    57 00000039 66 8B 44 24 08                      MOV     AX, [ESP + 8]       ; data
    58 0000003E 66 EF                               OUT     DX, AX
    59 00000040 C3                                  RET
    60 00000041                                 _io_out32:   ; void _io_out32(int port, int data);
    61 00000041 8B 54 24 04                         MOV     EDX, [ESP + 4]      ; port
    62 00000045 8B 44 24 08                         MOV     EAX, [ESP + 8]       ; data
    63 00000049 EF                                  OUT     DX, EAX
    64 0000004A C3                                  RET
    65 0000004B                                 _io_load_eflags:    ; int io_load_eflags(void);
    66 0000004B 9C                                  PUSHFD          ; 指 PUSH EFLAGS
    67 0000004C 58                                  POP     EAX
    68 0000004D C3                                  RET
    69 0000004E                                 _io_store_eflags:   ; void io_store_eflags(int eflags);
    70 0000004E 8B 44 24 04                         MOV     EAX, [ESP + 4]
    71 00000052 50                                  PUSH    EAX
    72 00000053 9D                                  POPFD           ; 指 POP EFLAGS
    73 00000054 C3                                  RET
    74 00000055                                 
    75 00000055                                 _load_gdtr:     ; void load_gdtr(int limit, int addr);
    76 00000055 66 8B 44 24 04                      MOV     AX, [ESP + 4]       ;limit
    77 0000005A 66 89 44 24 06                      MOV     [ESP + 6], AX
    78 0000005F 0F 01 54 24 06                      LGDT    [ESP + 6]
    79 00000064 C3                                  RET
    80 00000065                                 
    81 00000065                                 _load_idtr:     ; void load_idtr(int limit, int addr);
    82 00000065 66 8B 44 24 04                      MOV     AX, [ESP + 4]
    83 0000006A 66 89 44 24 06                      MOV     [ESP + 6], AX
    84 0000006F 0F 01 5C 24 06                      LIDT    [ESP + 6]
    85 00000074 C3                                  RET